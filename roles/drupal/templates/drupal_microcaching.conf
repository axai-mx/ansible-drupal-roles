location = /favicon.ico {
  log_not_found off;
  access_log off;
}

# Fighting with Styles? This little gem is amazing.
location ~ ^/sites/.*/files/styles/ {
  expires max;
  log_not_found off;
  try_files $uri @drupal;
}

location ~* \.(js|css|html|swf|flv|png|jpg|jpeg|gif|ico)$ {
  expires max;
  log_not_found off;
}

location = /robots.txt {
  allow all;
  log_not_found off;
  access_log off;
}

# Very rarely should these ever be accessed outside of your lan
location ~* \.(txt|log)$ {
  allow 192.168.0.0/16;
  deny all;
}

# Allow web fonts from remote locations,
# otherwise Firefox and IE blocks it
location ~* "^.*?\.(eot)|(ttf)|(woff)$" {
  add_header Access-Control-Allow-Origin *;
}

location ~ \..*/.*\.php$ {
  return 403;
}

# No no for private
location ~ ^/sites/.*/private/ {
  return 403;
}

# Block access to "hidden" files and directories whose names begin with a
# period. This includes directories used by version control systems such
# as Subversion or Git to store control files.
location ~ (^|/)\. {
  return 403;
}

## Replicate the Apache <FilesMatch> directive of Drupal standard
## .htaccess. Disable access to any code files. Return a 404 to curtail
## information disclosure. Hide also the text files.
location ~* ^(?:.+\.(?:htaccess|make|txt|engine|inc|info|install|module|profile|po|pot|sh|.*sql|test|theme|tpl(?:\.php)?|xtmpl)|code-style\.pl|/Entries.*|/Repository|/Root|/Tag|/Template)$ {
  return 404;
}

location / {
# This is cool because no php is touched for static content
  try_files $uri @drupal;
}

# This rewrites pages to be sent to PHP processing
location @drupal {
  index index.php;
  if (!-e $request_filename) {
    rewrite ^/(.*)$ /index.php?q=$1 last;
  }
}

location ~ \.php$ {
  fastcgi_keep_conn on; # keep alive to the FCGI upstream
  fastcgi_split_path_info ^(.+\.php)(/.+)$;
  #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
  ## Allow 4 hrs - pass timeout responsibility to upstream.
  fastcgi_read_timeout 14400;
  include /etc/nginx/fastcgi_params;
  fastcgi_intercept_errors on;

  fastcgi_pass phpcgi; 

  fastcgi_cache microcache;
  fastcgi_cache_key $scheme$request_method$host$request_uri;
  fastcgi_cache_valid 200 301 5s;
  fastcgi_cache_valid 302 1m;
  fastcgi_cache_valid 404 5s;

  add_header X-Cache $upstream_cache_status;
  expires epoch;

  #fastcgi_cache_purge PURGE from 127.0.0.1;

  ## If there are any upstream errors or the item has expired use
  ## whatever it is available.
  fastcgi_cache_use_stale error timeout invalid_header updating http_500;

  ## Uncomment if you want nginx to ignore Cache-Control set on drupal and just save the cache 1s
  #fastcgi_ignore_headers Cache-Control Expires;

  ## Bypass the cache.
  fastcgi_cache_bypass $no_cache;
  fastcgi_no_cache $no_cache;

  fastcgi_cache_lock on;
  fastcgi_cache_lock_timeout 8000; # in miliseconds.
}
